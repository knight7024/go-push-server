// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/knight7024/go-push-server/common/util"
	"github.com/knight7024/go-push-server/ent/project"
	"github.com/knight7024/go-push-server/ent/user"
)

// Project is the model entity for the Project schema.
type Project struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt util.Datetime `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt util.Datetime `json:"updated_at,omitempty"`
	// ProjectName holds the value of the "project_name" field.
	ProjectName string `json:"project_name,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID string `json:"project_id,omitempty"`
	// Credentials holds the value of the "credentials" field.
	Credentials []byte `json:"credentials,omitempty"`
	// ClientKey holds the value of the "client_key" field.
	ClientKey string `json:"client_key,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"-"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectQuery when eager-loading is set.
	Edges ProjectEdges `json:"edges"`
}

// ProjectEdges holds the relations/edges for other nodes in the graph.
type ProjectEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Project) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case project.FieldCredentials:
			values[i] = new([]byte)
		case project.FieldID, project.FieldUserID:
			values[i] = new(sql.NullInt64)
		case project.FieldProjectName, project.FieldProjectID, project.FieldClientKey:
			values[i] = new(sql.NullString)
		case project.FieldCreatedAt, project.FieldUpdatedAt:
			values[i] = new(util.Datetime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Project", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Project fields.
func (pr *Project) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case project.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case project.FieldCreatedAt:
			if value, ok := values[i].(*util.Datetime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value != nil {
				pr.CreatedAt = *value
			}
		case project.FieldUpdatedAt:
			if value, ok := values[i].(*util.Datetime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value != nil {
				pr.UpdatedAt = *value
			}
		case project.FieldProjectName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_name", values[i])
			} else if value.Valid {
				pr.ProjectName = value.String
			}
		case project.FieldProjectID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value.Valid {
				pr.ProjectID = value.String
			}
		case project.FieldCredentials:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field credentials", values[i])
			} else if value != nil {
				pr.Credentials = *value
			}
		case project.FieldClientKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_key", values[i])
			} else if value.Valid {
				pr.ClientKey = value.String
			}
		case project.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				pr.UserID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Project entity.
func (pr *Project) QueryUser() *UserQuery {
	return (&ProjectClient{config: pr.config}).QueryUser(pr)
}

// Update returns a builder for updating this Project.
// Note that you need to call Project.Unwrap() before calling this method if this Project
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Project) Update() *ProjectUpdateOne {
	return (&ProjectClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Project entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Project) Unwrap() *Project {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Project is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Project) String() string {
	var builder strings.Builder
	builder.WriteString("Project(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", pr.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", pr.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("project_name=")
	builder.WriteString(pr.ProjectName)
	builder.WriteString(", ")
	builder.WriteString("project_id=")
	builder.WriteString(pr.ProjectID)
	builder.WriteString(", ")
	builder.WriteString("credentials=")
	builder.WriteString(fmt.Sprintf("%v", pr.Credentials))
	builder.WriteString(", ")
	builder.WriteString("client_key=")
	builder.WriteString(pr.ClientKey)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// Projects is a parsable slice of Project.
type Projects []*Project

func (pr Projects) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
