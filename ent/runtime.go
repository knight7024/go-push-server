// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/knight7024/go-push-server/common/util"
	"github.com/knight7024/go-push-server/ent/project"
	"github.com/knight7024/go-push-server/ent/schema"
	"github.com/knight7024/go-push-server/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	projectMixin := schema.Project{}.Mixin()
	projectMixinFields0 := projectMixin[0].Fields()
	_ = projectMixinFields0
	projectFields := schema.Project{}.Fields()
	_ = projectFields
	// projectDescCreatedAt is the schema descriptor for created_at field.
	projectDescCreatedAt := projectMixinFields0[0].Descriptor()
	// project.DefaultCreatedAt holds the default value on creation for the created_at field.
	project.DefaultCreatedAt = projectDescCreatedAt.Default.(func() util.Datetime)
	// projectDescUpdatedAt is the schema descriptor for updated_at field.
	projectDescUpdatedAt := projectMixinFields0[1].Descriptor()
	// project.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	project.DefaultUpdatedAt = projectDescUpdatedAt.Default.(func() util.Datetime)
	// project.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	project.UpdateDefaultUpdatedAt = projectDescUpdatedAt.UpdateDefault.(func() util.Datetime)
	// projectDescProjectName is the schema descriptor for project_name field.
	projectDescProjectName := projectFields[0].Descriptor()
	// project.ProjectNameValidator is a validator for the "project_name" field. It is called by the builders before save.
	project.ProjectNameValidator = func() func(string) error {
		validators := projectDescProjectName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(project_name string) error {
			for _, fn := range fns {
				if err := fn(project_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// projectDescProjectID is the schema descriptor for project_id field.
	projectDescProjectID := projectFields[1].Descriptor()
	// project.ProjectIDValidator is a validator for the "project_id" field. It is called by the builders before save.
	project.ProjectIDValidator = projectDescProjectID.Validators[0].(func(string) error)
	// projectDescCredentials is the schema descriptor for credentials field.
	projectDescCredentials := projectFields[2].Descriptor()
	// project.CredentialsValidator is a validator for the "credentials" field. It is called by the builders before save.
	project.CredentialsValidator = projectDescCredentials.Validators[0].(func([]byte) error)
	// projectDescClientKey is the schema descriptor for client_key field.
	projectDescClientKey := projectFields[3].Descriptor()
	// project.DefaultClientKey holds the default value on creation for the client_key field.
	project.DefaultClientKey = projectDescClientKey.Default.(func() string)
	// project.ClientKeyValidator is a validator for the "client_key" field. It is called by the builders before save.
	project.ClientKeyValidator = projectDescClientKey.Validators[0].(func(string) error)
	// projectDescUserID is the schema descriptor for user_id field.
	projectDescUserID := projectFields[4].Descriptor()
	// project.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	project.UserIDValidator = projectDescUserID.Validators[0].(func(int) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[0].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = func() func(string) error {
		validators := userDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[1].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescIsApproved is the schema descriptor for is_approved field.
	userDescIsApproved := userFields[2].Descriptor()
	// user.DefaultIsApproved holds the default value on creation for the is_approved field.
	user.DefaultIsApproved = userDescIsApproved.Default.(bool)
}
