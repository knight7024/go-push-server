// Code generated by ent, DO NOT EDIT.

package project

import (
	"github.com/knight7024/go-push-server/common/util"
)

const (
	// Label holds the string label denoting the project type in the database.
	Label = "project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldProjectName holds the string denoting the project_name field in the database.
	FieldProjectName = "project_name"
	// FieldProjectID holds the string denoting the project_id field in the database.
	FieldProjectID = "project_id"
	// FieldCredentials holds the string denoting the credentials field in the database.
	FieldCredentials = "credentials"
	// FieldClientKey holds the string denoting the client_key field in the database.
	FieldClientKey = "client_key"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the project in the database.
	Table = "projects"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "projects"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for project fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldProjectName,
	FieldProjectID,
	FieldCredentials,
	FieldClientKey,
	FieldUserID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() util.Datetime
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() util.Datetime
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() util.Datetime
	// ProjectNameValidator is a validator for the "project_name" field. It is called by the builders before save.
	ProjectNameValidator func(string) error
	// ProjectIDValidator is a validator for the "project_id" field. It is called by the builders before save.
	ProjectIDValidator func(string) error
	// CredentialsValidator is a validator for the "credentials" field. It is called by the builders before save.
	CredentialsValidator func([]byte) error
	// DefaultClientKey holds the default value on creation for the "client_key" field.
	DefaultClientKey func() string
	// ClientKeyValidator is a validator for the "client_key" field. It is called by the builders before save.
	ClientKeyValidator func(string) error
	// UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	UserIDValidator func(int) error
)
