// Code generated by ent, DO NOT EDIT.

package project

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/knight7024/go-push-server/common/util"
	"github.com/knight7024/go-push-server/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v util.Datetime) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v util.Datetime) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ProjectName applies equality check predicate on the "project_name" field. It's identical to ProjectNameEQ.
func ProjectName(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectName), v))
	})
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectID), v))
	})
}

// Credentials applies equality check predicate on the "credentials" field. It's identical to CredentialsEQ.
func Credentials(v []byte) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCredentials), v))
	})
}

// ClientKey applies equality check predicate on the "client_key" field. It's identical to ClientKeyEQ.
func ClientKey(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientKey), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v util.Datetime) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v util.Datetime) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...util.Datetime) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...util.Datetime) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v util.Datetime) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v util.Datetime) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v util.Datetime) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v util.Datetime) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v util.Datetime) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v util.Datetime) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...util.Datetime) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...util.Datetime) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v util.Datetime) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v util.Datetime) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v util.Datetime) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v util.Datetime) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// ProjectNameEQ applies the EQ predicate on the "project_name" field.
func ProjectNameEQ(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectName), v))
	})
}

// ProjectNameNEQ applies the NEQ predicate on the "project_name" field.
func ProjectNameNEQ(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProjectName), v))
	})
}

// ProjectNameIn applies the In predicate on the "project_name" field.
func ProjectNameIn(vs ...string) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProjectName), v...))
	})
}

// ProjectNameNotIn applies the NotIn predicate on the "project_name" field.
func ProjectNameNotIn(vs ...string) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProjectName), v...))
	})
}

// ProjectNameGT applies the GT predicate on the "project_name" field.
func ProjectNameGT(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProjectName), v))
	})
}

// ProjectNameGTE applies the GTE predicate on the "project_name" field.
func ProjectNameGTE(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProjectName), v))
	})
}

// ProjectNameLT applies the LT predicate on the "project_name" field.
func ProjectNameLT(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProjectName), v))
	})
}

// ProjectNameLTE applies the LTE predicate on the "project_name" field.
func ProjectNameLTE(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProjectName), v))
	})
}

// ProjectNameContains applies the Contains predicate on the "project_name" field.
func ProjectNameContains(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProjectName), v))
	})
}

// ProjectNameHasPrefix applies the HasPrefix predicate on the "project_name" field.
func ProjectNameHasPrefix(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProjectName), v))
	})
}

// ProjectNameHasSuffix applies the HasSuffix predicate on the "project_name" field.
func ProjectNameHasSuffix(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProjectName), v))
	})
}

// ProjectNameEqualFold applies the EqualFold predicate on the "project_name" field.
func ProjectNameEqualFold(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProjectName), v))
	})
}

// ProjectNameContainsFold applies the ContainsFold predicate on the "project_name" field.
func ProjectNameContainsFold(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProjectName), v))
	})
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectID), v))
	})
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProjectID), v))
	})
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...string) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProjectID), v...))
	})
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...string) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProjectID), v...))
	})
}

// ProjectIDGT applies the GT predicate on the "project_id" field.
func ProjectIDGT(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProjectID), v))
	})
}

// ProjectIDGTE applies the GTE predicate on the "project_id" field.
func ProjectIDGTE(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProjectID), v))
	})
}

// ProjectIDLT applies the LT predicate on the "project_id" field.
func ProjectIDLT(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProjectID), v))
	})
}

// ProjectIDLTE applies the LTE predicate on the "project_id" field.
func ProjectIDLTE(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProjectID), v))
	})
}

// ProjectIDContains applies the Contains predicate on the "project_id" field.
func ProjectIDContains(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProjectID), v))
	})
}

// ProjectIDHasPrefix applies the HasPrefix predicate on the "project_id" field.
func ProjectIDHasPrefix(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProjectID), v))
	})
}

// ProjectIDHasSuffix applies the HasSuffix predicate on the "project_id" field.
func ProjectIDHasSuffix(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProjectID), v))
	})
}

// ProjectIDEqualFold applies the EqualFold predicate on the "project_id" field.
func ProjectIDEqualFold(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProjectID), v))
	})
}

// ProjectIDContainsFold applies the ContainsFold predicate on the "project_id" field.
func ProjectIDContainsFold(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProjectID), v))
	})
}

// CredentialsEQ applies the EQ predicate on the "credentials" field.
func CredentialsEQ(v []byte) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCredentials), v))
	})
}

// CredentialsNEQ applies the NEQ predicate on the "credentials" field.
func CredentialsNEQ(v []byte) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCredentials), v))
	})
}

// CredentialsIn applies the In predicate on the "credentials" field.
func CredentialsIn(vs ...[]byte) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCredentials), v...))
	})
}

// CredentialsNotIn applies the NotIn predicate on the "credentials" field.
func CredentialsNotIn(vs ...[]byte) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCredentials), v...))
	})
}

// CredentialsGT applies the GT predicate on the "credentials" field.
func CredentialsGT(v []byte) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCredentials), v))
	})
}

// CredentialsGTE applies the GTE predicate on the "credentials" field.
func CredentialsGTE(v []byte) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCredentials), v))
	})
}

// CredentialsLT applies the LT predicate on the "credentials" field.
func CredentialsLT(v []byte) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCredentials), v))
	})
}

// CredentialsLTE applies the LTE predicate on the "credentials" field.
func CredentialsLTE(v []byte) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCredentials), v))
	})
}

// ClientKeyEQ applies the EQ predicate on the "client_key" field.
func ClientKeyEQ(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientKey), v))
	})
}

// ClientKeyNEQ applies the NEQ predicate on the "client_key" field.
func ClientKeyNEQ(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClientKey), v))
	})
}

// ClientKeyIn applies the In predicate on the "client_key" field.
func ClientKeyIn(vs ...string) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldClientKey), v...))
	})
}

// ClientKeyNotIn applies the NotIn predicate on the "client_key" field.
func ClientKeyNotIn(vs ...string) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldClientKey), v...))
	})
}

// ClientKeyGT applies the GT predicate on the "client_key" field.
func ClientKeyGT(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClientKey), v))
	})
}

// ClientKeyGTE applies the GTE predicate on the "client_key" field.
func ClientKeyGTE(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClientKey), v))
	})
}

// ClientKeyLT applies the LT predicate on the "client_key" field.
func ClientKeyLT(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClientKey), v))
	})
}

// ClientKeyLTE applies the LTE predicate on the "client_key" field.
func ClientKeyLTE(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClientKey), v))
	})
}

// ClientKeyContains applies the Contains predicate on the "client_key" field.
func ClientKeyContains(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClientKey), v))
	})
}

// ClientKeyHasPrefix applies the HasPrefix predicate on the "client_key" field.
func ClientKeyHasPrefix(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClientKey), v))
	})
}

// ClientKeyHasSuffix applies the HasSuffix predicate on the "client_key" field.
func ClientKeyHasSuffix(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClientKey), v))
	})
}

// ClientKeyEqualFold applies the EqualFold predicate on the "client_key" field.
func ClientKeyEqualFold(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClientKey), v))
	})
}

// ClientKeyContainsFold applies the ContainsFold predicate on the "client_key" field.
func ClientKeyContainsFold(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClientKey), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Project) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		p(s.Not())
	})
}
